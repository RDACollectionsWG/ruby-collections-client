=begin
#RDA Collections API

#API Strawman for RDA Research Data Collections WG

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module CollectionsClient
  class MembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get the members in a collection
    # This request returns the list of members contained in a collection.  This may be a complete list, or if the service features include support for pagination, the cursors in the response may be used to iterate backwards and forwards through pages of partial results. Query parameters may be used to supply filtering criteria for the response. When combining filters of different types, the boolean AND will be used. When combining multiple instances of filters of the same type, the boolean OR will be used.
    # @param id Identifier for the collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :f_datatype Filter response to members matching the requested datatype.
    # @option opts [String] :f_role Filter response to members who are assigned the requested role. (Only if the collection capability supportsRoles is true).
    # @option opts [Integer] :f_index Filter response to the members assigned the requested index. (Only if the collection capability isOrdered is true).
    # @option opts [DateTime] :f_date_added Filter response to the membered added on the requestd datetime.
    # @option opts [String] :cursor cursor for iterating a prior response to this query
    # @option opts [Integer] :expand_depth expand members which are collections to this depth. may not exceed maxExpansionDepth feature setting for the service.
    # @return [MemberResultSet]
    def collections_id_members_get(id, opts = {})
      data, _status_code, _headers = collections_id_members_get_with_http_info(id, opts)
      return data
    end

    # Get the members in a collection
    # This request returns the list of members contained in a collection.  This may be a complete list, or if the service features include support for pagination, the cursors in the response may be used to iterate backwards and forwards through pages of partial results. Query parameters may be used to supply filtering criteria for the response. When combining filters of different types, the boolean AND will be used. When combining multiple instances of filters of the same type, the boolean OR will be used.
    # @param id Identifier for the collection
    # @param [Hash] opts the optional parameters
    # @option opts [String] :f_datatype Filter response to members matching the requested datatype.
    # @option opts [String] :f_role Filter response to members who are assigned the requested role. (Only if the collection capability supportsRoles is true).
    # @option opts [Integer] :f_index Filter response to the members assigned the requested index. (Only if the collection capability isOrdered is true).
    # @option opts [DateTime] :f_date_added Filter response to the membered added on the requestd datetime.
    # @option opts [String] :cursor cursor for iterating a prior response to this query
    # @option opts [Integer] :expand_depth expand members which are collections to this depth. may not exceed maxExpansionDepth feature setting for the service.
    # @return [Array<(MemberResultSet, Fixnum, Hash)>] MemberResultSet data, response status code and response headers
    def collections_id_members_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_get" if id.nil?
      # resource path
      local_var_path = "/collections/{id}/members".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'f_datatype'] = opts[:'f_datatype'] if !opts[:'f_datatype'].nil?
      query_params[:'f_role'] = opts[:'f_role'] if !opts[:'f_role'].nil?
      query_params[:'f_index'] = opts[:'f_index'] if !opts[:'f_index'].nil?
      query_params[:'f_dateAdded'] = opts[:'f_date_added'] if !opts[:'f_date_added'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'expandDepth'] = opts[:'expand_depth'] if !opts[:'expand_depth'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MemberResultSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a collection member item.
    # Removes a member item from a collection. The response may differ depending upon whether or not the  service features include support for asynchronous actions.
    # @param id Persistent identifier for the collection
    # @param mid Identifier for the collection member
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collections_id_members_mid_delete(id, mid, opts = {})
      collections_id_members_mid_delete_with_http_info(id, mid, opts)
      return nil
    end

    # Remove a collection member item.
    # Removes a member item from a collection. The response may differ depending upon whether or not the  service features include support for asynchronous actions.
    # @param id Persistent identifier for the collection
    # @param mid Identifier for the collection member
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def collections_id_members_mid_delete_with_http_info(id, mid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_mid_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_mid_delete" if id.nil?
      # verify the required parameter 'mid' is set
      fail ArgumentError, "Missing the required parameter 'mid' when calling MembersApi.collections_id_members_mid_delete" if mid.nil?
      # resource path
      local_var_path = "/collections/{id}/members/{mid}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'mid' + '}', mid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_mid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the properties of a member item in a collection
    # This request retrieves the properties of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param [Hash] opts the optional parameters
    # @return [MemberItem]
    def collections_id_members_mid_get(id, mid, opts = {})
      data, _status_code, _headers = collections_id_members_mid_get_with_http_info(id, mid, opts)
      return data
    end

    # Get the properties of a member item in a collection
    # This request retrieves the properties of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberItem, Fixnum, Hash)>] MemberItem data, response status code and response headers
    def collections_id_members_mid_get_with_http_info(id, mid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_mid_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_mid_get" if id.nil?
      # verify the required parameter 'mid' is set
      fail ArgumentError, "Missing the required parameter 'mid' when calling MembersApi.collections_id_members_mid_get" if mid.nil?
      # resource path
      local_var_path = "/collections/{id}/members/{mid}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'mid' + '}', mid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MemberItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_mid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a named property of a member item in a collection
    # This request deletes a specific named property of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param property the name of a property to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collections_id_members_mid_properties_property_delete(id, mid, property, opts = {})
      collections_id_members_mid_properties_property_delete_with_http_info(id, mid, property, opts)
      return nil
    end

    # Delete a named property of a member item in a collection
    # This request deletes a specific named property of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param property the name of a property to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def collections_id_members_mid_properties_property_delete_with_http_info(id, mid, property, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_mid_properties_property_delete ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_mid_properties_property_delete" if id.nil?
      # verify the required parameter 'mid' is set
      fail ArgumentError, "Missing the required parameter 'mid' when calling MembersApi.collections_id_members_mid_properties_property_delete" if mid.nil?
      # verify the required parameter 'property' is set
      fail ArgumentError, "Missing the required parameter 'property' when calling MembersApi.collections_id_members_mid_properties_property_delete" if property.nil?
      # resource path
      local_var_path = "/collections/{id}/members/{mid}/properties/{property}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'mid' + '}', mid.to_s).sub('{' + 'property' + '}', property.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_mid_properties_property_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a named property of a member item in a collection
    # This request retrieves a specific named property of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param property the name of a property to retrieve (e.g. index)
    # @param [Hash] opts the optional parameters
    # @return [MemberItem]
    def collections_id_members_mid_properties_property_get(id, mid, property, opts = {})
      data, _status_code, _headers = collections_id_members_mid_properties_property_get_with_http_info(id, mid, property, opts)
      return data
    end

    # Get a named property of a member item in a collection
    # This request retrieves a specific named property of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param property the name of a property to retrieve (e.g. index)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberItem, Fixnum, Hash)>] MemberItem data, response status code and response headers
    def collections_id_members_mid_properties_property_get_with_http_info(id, mid, property, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_mid_properties_property_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_mid_properties_property_get" if id.nil?
      # verify the required parameter 'mid' is set
      fail ArgumentError, "Missing the required parameter 'mid' when calling MembersApi.collections_id_members_mid_properties_property_get" if mid.nil?
      # verify the required parameter 'property' is set
      fail ArgumentError, "Missing the required parameter 'property' when calling MembersApi.collections_id_members_mid_properties_property_get" if property.nil?
      # resource path
      local_var_path = "/collections/{id}/members/{mid}/properties/{property}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'mid' + '}', mid.to_s).sub('{' + 'property' + '}', property.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MemberItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_mid_properties_property_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a named property of a member item in a collection
    # This request updates a specific named property of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param property the name of a property to update
    # @param content new property value
    # @param [Hash] opts the optional parameters
    # @return [MemberItem]
    def collections_id_members_mid_properties_property_put(id, mid, property, content, opts = {})
      data, _status_code, _headers = collections_id_members_mid_properties_property_put_with_http_info(id, mid, property, content, opts)
      return data
    end

    # Update a named property of a member item in a collection
    # This request updates a specific named property of a specific member item from a collection
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member item.
    # @param property the name of a property to update
    # @param content new property value
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberItem, Fixnum, Hash)>] MemberItem data, response status code and response headers
    def collections_id_members_mid_properties_property_put_with_http_info(id, mid, property, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_mid_properties_property_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_mid_properties_property_put" if id.nil?
      # verify the required parameter 'mid' is set
      fail ArgumentError, "Missing the required parameter 'mid' when calling MembersApi.collections_id_members_mid_properties_property_put" if mid.nil?
      # verify the required parameter 'property' is set
      fail ArgumentError, "Missing the required parameter 'property' when calling MembersApi.collections_id_members_mid_properties_property_put" if property.nil?
      # verify the required parameter 'content' is set
      fail ArgumentError, "Missing the required parameter 'content' when calling MembersApi.collections_id_members_mid_properties_property_put" if content.nil?
      # resource path
      local_var_path = "/collections/{id}/members/{mid}/properties/{property}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'mid' + '}', mid.to_s).sub('{' + 'property' + '}', property.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(content)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MemberItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_mid_properties_property_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the properties of a collection member item.
    # This request updates the properties of a collection member item.  The updated member  properties must be supplied in the body of the request. The response may differ  depending upon whether or not the  service features include support  for asynchronous actions.
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member
    # @param content collection metadata
    # @param [Hash] opts the optional parameters
    # @return [MemberItem]
    def collections_id_members_mid_put(id, mid, content, opts = {})
      data, _status_code, _headers = collections_id_members_mid_put_with_http_info(id, mid, content, opts)
      return data
    end

    # Update the properties of a collection member item.
    # This request updates the properties of a collection member item.  The updated member  properties must be supplied in the body of the request. The response may differ  depending upon whether or not the  service features include support  for asynchronous actions.
    # @param id Identifier for the collection
    # @param mid Identifier for the collection member
    # @param content collection metadata
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemberItem, Fixnum, Hash)>] MemberItem data, response status code and response headers
    def collections_id_members_mid_put_with_http_info(id, mid, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_mid_put ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_mid_put" if id.nil?
      # verify the required parameter 'mid' is set
      fail ArgumentError, "Missing the required parameter 'mid' when calling MembersApi.collections_id_members_mid_put" if mid.nil?
      # verify the required parameter 'content' is set
      fail ArgumentError, "Missing the required parameter 'content' when calling MembersApi.collections_id_members_mid_put" if content.nil?
      # resource path
      local_var_path = "/collections/{id}/members/{mid}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'mid' + '}', mid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(content)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MemberItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_mid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new member item to this collection
    # This request adds a new member item to a collection. If the service features include support for PID assignment to member items, then if no id is supplied for the item it  will be assigned automatically.  
    # @param id Identifier for the collection
    # @param content The properties of the member item to add to the collection. Id may be required.
    # @param [Hash] opts the optional parameters
    # @return [Array<MemberItem>]
    def collections_id_members_post(id, content, opts = {})
      data, _status_code, _headers = collections_id_members_post_with_http_info(id, content, opts)
      return data
    end

    # Add a new member item to this collection
    # This request adds a new member item to a collection. If the service features include support for PID assignment to member items, then if no id is supplied for the item it  will be assigned automatically.  
    # @param id Identifier for the collection
    # @param content The properties of the member item to add to the collection. Id may be required.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MemberItem>, Fixnum, Hash)>] Array<MemberItem> data, response status code and response headers
    def collections_id_members_post_with_http_info(id, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MembersApi.collections_id_members_post ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.collections_id_members_post" if id.nil?
      # verify the required parameter 'content' is set
      fail ArgumentError, "Missing the required parameter 'content' when calling MembersApi.collections_id_members_post" if content.nil?
      # resource path
      local_var_path = "/collections/{id}/members".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(content)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MemberItem>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#collections_id_members_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
